
operation kpimodel!StaticRealValue get(city: sc!SmartCity): Any{
	return self.actualizedvalue;
}

operation kpimodel!StaticBoolValue get(city: sc!SmartCity): Any{
	return self.actualizedvalue;
}

operation kpimodel!StaticIntegerValue get(city: sc!SmartCity): Any{
	return self.actualizedvalue;
}

operation kpimodel!RealValue get(city: sc!SmartCity): Real{
var data = sc!Data.all;
if(data.exists(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name)){ 
return data.selectOne(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name).value;
}
}

operation kpimodel!BoolValue get(city: sc!SmartCity): Boolean{
var data = sc!Data.all;
if(data.exists(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name)){ 
return data.selectOne(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name).value;
}
}

operation kpimodel!IntegerValue get(city: sc!SmartCity): Integer{
var data = sc!Data.all;
if(data.exists(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name)){ 
return data.selectOne(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name).value;
}
}

operation kpimodel!StringValue get(city: sc!SmartCity): String{
var data = sc!Data.all;
if(data.exists(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name)){ 
return data.selectOne(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name).value;
}
}

operation kpimodel!AggregatedRealValue get(city: sc!SmartCity): Any{

return self.values.equivalent().collect(e|e.actualizedvalue).getop(self.oper);
	
}

operation kpimodel!AggregatedRangedValue get(city: sc!SmartCity): Any{
var value = self.values.equivalent().collect(e|e.actualizedvalue).getop(self.oper).first;
return self.ranges.selectOne(r|r.min <= value and r.max >= value).name;	
	
}



operation Any getop(op: kpimodel!EEnumLiteral): Any{

switch (op) {
case kpimodel!Operation#GET: return self;
case kpimodel!Operation#SUM: return self.sum();
case kpimodel!Operation#AVG: return self.sum()/self.size();
case kpimodel!Operation#MIN: return self.min();
case kpimodel!Operation#MAX: return self.max();
case kpimodel!Operation#DIV: return self.get(0).ifUndefined(0)/self.get(1).ifUndefined(0);
case kpimodel!Operation#MULT: return self.get(0)*self.get(1);
case kpimodel!Operation#CEN: if(self.get(0) >= 100000) return self.get(0) / 100000; else return self.get(0) / self.get(0);
default : "No operation provided ".println(); }

}




